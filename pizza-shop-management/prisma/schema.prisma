generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  name           String
  email          String            @unique
  password       String
  role           UserRole          @default(CUSTOMER)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  ordersCreated  Order[]           @relation("CreatedBy")
  ordersHandled  Order[]           @relation("HandledBy")
  payments       Payment[]
  shifts         Shift[]
  assignedTables TableAssignment[]
}

model Table {
  id           String            @id @default(uuid())
  tableNumber  Int               @unique
  capacity     Int
  location     String
  status       TableStatus       @default(AVAILABLE)
  qrCode       String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  orders       Order[]
  reservations Reservation[]
  assignments  TableAssignment[]
}

model TableAssignment {
  id        String    @id @default(uuid())
  userId    String
  tableId   String
  startTime DateTime  @default(now())
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tableId, startTime])
}

model Reservation {
  id              String            @id @default(uuid())
  tableId         String
  customerName    String
  customerPhone   String?
  customerEmail   String?
  partySize       Int
  reservationTime DateTime
  duration        Int
  notes           String?
  status          ReservationStatus @default(CONFIRMED)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  table           Table             @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

model Category {
  id           String     @id @default(uuid())
  name         String     @unique
  description  String?
  displayOrder Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  menuItems    MenuItem[]
}

model MenuItem {
  id             String               @id @default(uuid())
  name           String
  description    String?
  price          Decimal              @db.Decimal(10, 2)
  image          String?
  calories       Int?
  isVegetarian   Boolean              @default(false)
  isVegan        Boolean              @default(false)
  isGlutenFree   Boolean              @default(false)
  isActive       Boolean              @default(true)
  categoryId     String
  displayOrder   Int                  @default(0)
  isPizzaBase    Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  combos         ComboMenuItem[]
  category       Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ingredients    MenuItemIngredient[]
  orderItems     OrderItem[]
  customizations PizzaCustomization[]
  promotionItems PromotionItem[]
}

model Ingredient {
  id             String               @id @default(uuid())
  name           String               @unique
  description    String?
  stockQuantity  Float
  unit           String
  reorderLevel   Float
  costPerUnit    Decimal              @db.Decimal(10, 2)
  isActive       Boolean              @default(true)
  isPizzaTopping Boolean              @default(false)
  category       String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  menuItems      MenuItemIngredient[]
  pizzaToppings  PizzaTopping[]
}

model MenuItemIngredient {
  menuItemId   String
  ingredientId String
  quantity     Float
  isOptional   Boolean    @default(false)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  menuItem     MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@id([menuItemId, ingredientId])
}

model PizzaSize {
  id             String               @id @default(uuid())
  name           String               @unique
  description    String?
  diameter       Int?
  basePrice      Decimal              @db.Decimal(10, 2)
  displayOrder   Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  customizations PizzaCustomization[]
}

model PizzaCrust {
  id              String               @id @default(uuid())
  name            String               @unique
  description     String?
  priceAdjustment Decimal              @default(0.00) @db.Decimal(10, 2)
  displayOrder    Int                  @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  customizations  PizzaCustomization[]
}

model PizzaTopping {
  id                    String                      @id @default(uuid())
  ingredientId          String
  priceAdjustment       Decimal                     @db.Decimal(10, 2)
  displayOrder          Int                         @default(0)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  customizationToppings PizzaCustomizationTopping[]
  ingredient            Ingredient                  @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
}

model PizzaCustomization {
  id                  String                      @id @default(uuid())
  menuItemId          String
  sizeId              String?
  crustId             String?
  specialInstructions String?
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  orderItems          OrderItem[]
  crust               PizzaCrust?                 @relation(fields: [crustId], references: [id])
  menuItem            MenuItem                    @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  size                PizzaSize?                  @relation(fields: [sizeId], references: [id])
  toppings            PizzaCustomizationTopping[]
}

model PizzaCustomizationTopping {
  customizationId String
  toppingId       String
  quantity        Int                @default(1)
  leftHalf        Boolean            @default(false)
  rightHalf       Boolean            @default(false)
  customization   PizzaCustomization @relation(fields: [customizationId], references: [id], onDelete: Cascade)
  topping         PizzaTopping       @relation(fields: [toppingId], references: [id], onDelete: Cascade)

  @@id([customizationId, toppingId])
}

model Combo {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Decimal         @db.Decimal(10, 2)
  discount    Decimal         @default(0.00) @db.Decimal(10, 2)
  image       String?
  isActive    Boolean         @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       ComboMenuItem[]
  orderItems  OrderItem[]
}

model ComboMenuItem {
  comboId    String
  menuItemId String
  quantity   Int      @default(1)
  combo      Combo    @relation(fields: [comboId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@id([comboId, menuItemId])
}

model Promotion {
  id            String          @id @default(uuid())
  name          String
  description   String?
  discountType  DiscountType
  discountValue Decimal         @db.Decimal(10, 2)
  code          String?         @unique
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orders        Order[]
  items         PromotionItem[]
}

model PromotionItem {
  promotionId String
  menuItemId  String
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@id([promotionId, menuItemId])
}

model Order {
  id                  String              @id @default(uuid())
  orderNumber         String              @unique
  tableId             String?
  orderType           OrderType           @default(DINE_IN)
  status              OrderStatus         @default(PLACED)
  specialInstructions String?
  subtotal            Decimal             @db.Decimal(10, 2)
  tax                 Decimal             @db.Decimal(10, 2)
  tip                 Decimal             @default(0.00) @db.Decimal(10, 2)
  total               Decimal             @db.Decimal(10, 2)
  estimatedReadyTime  DateTime?
  actualReadyTime     DateTime?
  createdById         String
  handledById         String?
  promotionId         String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdBy           User                @relation("CreatedBy", fields: [createdById], references: [id])
  handledBy           User?               @relation("HandledBy", fields: [handledById], references: [id])
  promotion           Promotion?          @relation(fields: [promotionId], references: [id])
  table               Table?              @relation(fields: [tableId], references: [id])
  items               OrderItem[]
  statusUpdates       OrderStatusUpdate[]
  payments            Payment[]
}

model OrderItem {
  id                  String              @id @default(uuid())
  orderId             String
  menuItemId          String?
  comboId             String?
  customizationId     String?
  quantity            Int
  price               Decimal             @db.Decimal(10, 2)
  specialInstructions String?
  status              OrderItemStatus     @default(PLACED)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  combo               Combo?              @relation(fields: [comboId], references: [id])
  customization       PizzaCustomization? @relation(fields: [customizationId], references: [id])
  menuItem            MenuItem?           @relation(fields: [menuItemId], references: [id])
  order               Order               @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderStatusUpdate {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  processedById String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  processedBy   User          @relation(fields: [processedById], references: [id])
}

model Shift {
  id        String    @id @default(uuid())
  userId    String
  startTime DateTime
  endTime   DateTime?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MANAGER
  SERVER
  KITCHEN
  CASHIER
  CUSTOMER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  CLEANING
}

enum ReservationStatus {
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_ONE_GET_ONE
  FREE_ITEM
}

enum OrderType {
  DINE_IN
  TAKEOUT
  DELIVERY
}

enum OrderStatus {
  PLACED
  PREPARING
  READY
  DELIVERED
  COMPLETED
  CANCELLED
}

enum OrderItemStatus {
  PLACED
  PREPARING
  COOKING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  GIFT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
