---
description: 
globs:    **/*.{ts,tsx}
alwaysApply: false
---
// Pattern: **/*.{ts,tsx}
// Description: Error Handling Patterns for the Restaurant Management System

# Error Handling Patterns

You are implementing error handling for a restaurant management system, ensuring robust error management throughout the application.

## General Error Handling Principles

- Handle errors and edge cases at the beginning of functions
- Use early returns for error conditions to avoid deeply nested if statements
- Place the happy path last in the function for improved readability
- Avoid unnecessary else statements; use if-return pattern instead
- Use guard clauses to handle preconditions and invalid states early
- Implement proper error logging and user-friendly error messages
- Consider using custom error types or error factories for consistent error handling
- Use descriptive error variable names (`error` instead of `e`)
- Ensure caught errors are properly handled, not just logged

## Server Components and Actions

- Use try/catch blocks for async operations
- Return appropriate error responses from API endpoints
- Model expected errors as return values in Server Actions
- Use error boundaries for unexpected errors with error.tsx files
- Implement proper validation of all inputs using Zod schemas
- Never expose internal error details to clients
- Log errors appropriately for debugging

## Client Component Error Handling

- Implement proper error states in UI
- Show user-friendly error messages
- Provide recovery options when possible
- Use error boundaries to prevent entire UI crashes
- Handle network errors gracefully with retry options
- Implement loading states to prevent errors from poor UX

## Database Error Handling

- Implement proper error handling for all Prisma queries
- Use transactions to ensure data consistency
- Handle unique constraint violations appropriately
- Implement retry logic where appropriate
- Never expose database errors directly to the client